import { 
  ToolType, 
  ExecutionContext, 
  ExecutionResult 
} from "../../models/agent-model";
import { BaseSimpleTool, ToolParameter } from "../base-tool";

/**
 * Worldbook Tool - Pure Execution Unit
 * Handles worldbook generation metadata based on provided parameters from planner
 * Actual content generation is handled by AgentEngine
 */
export class WorldbookTool extends BaseSimpleTool {
  readonly toolType = ToolType.WORLDBOOK;
  readonly name = "WORLDBOOK";
  readonly description = "Process a pre-generated worldbook entry and validate its structure";
  
  readonly parameters: ToolParameter[] = [
    {
      name: "worldbook_entry",
      type: "object",
      description: "A single, complete worldbook entry generated by the planner. The entry must contain id, uid, key, content, and other worldbook fields.",
      required: true,
      properties: {
        id: { type: "string", description: "Unique identifier for the entry" },
        uid: { type: "string", description: "Numeric ID as string (e.g., '1001')" },
        key: { type: "array", description: "Array of primary trigger keywords" },
        keysecondary: { type: "array", description: "Array of secondary trigger keywords", required: false },
        comment: { type: "string", description: "Brief description of what this entry covers" },
        content: { type: "string", description: "Detailed worldbook content that enhances roleplay" },
        constant: { type: "boolean", description: "Whether entry is always active", required: false, default: false },
        selective: { type: "boolean", description: "Whether entry uses selective activation", required: false, default: true },
        order: { type: "number", description: "Display/processing order", required: false, default: 100 },
        position: { type: "number", description: "Position in worldbook", required: false, default: 0 },
        disable: { type: "boolean", description: "Whether entry is disabled", required: false, default: false },
        probability: { type: "number", description: "Activation probability (0-100)", required: false, default: 100 },
        useProbability: { type: "boolean", description: "Whether to use probability activation", required: false, default: true }
      }
    }
  ];



  protected async doWork(parameters: Record<string, any>, context: ExecutionContext): Promise<ExecutionResult> {
    const worldbookEntry = parameters.worldbook_entry;
    
    if (!worldbookEntry || typeof worldbookEntry !== 'object') {
      return this.createFailureResult("WORLDBOOK tool requires 'worldbook_entry' parameter as an object.");
    }

    // Validate required fields
    if (!worldbookEntry.content || typeof worldbookEntry.content !== 'string') {
      return this.createFailureResult("WORLDBOOK entry must have 'content' field as a string.");
    }

    // Validate and fix entry structure
    const validatedEntry = {
      id: worldbookEntry.id || `wb_entry_${Date.now()}`,
      uid: worldbookEntry.uid || (1000).toString(),
      key: Array.isArray(worldbookEntry.key) ? worldbookEntry.key : [worldbookEntry.key || "keyword"],
      keysecondary: Array.isArray(worldbookEntry.keysecondary) ? worldbookEntry.keysecondary : [],
      comment: worldbookEntry.comment || "Worldbook entry",
      content: worldbookEntry.content,
      constant: worldbookEntry.constant || false,
      selective: worldbookEntry.selective !== false,
      order: worldbookEntry.order || 100,
      position: worldbookEntry.position || 0,
      disable: worldbookEntry.disable || false,
      probability: worldbookEntry.probability || 100,
      useProbability: worldbookEntry.useProbability !== false
    };

    return this.createSuccessResult({
      worldbook_data: [validatedEntry],
    });
  }

}