import { 
  ToolType, 
  ExecutionContext, 
  ExecutionResult 
} from "../../models/agent-model";
import { ResearchSessionOperations } from "../../data/agent/agent-conversation-operations";
import { BaseSimpleTool, ToolParameter } from "../base-tool";

/**
 * Character Tool - Pure Execution Unit
 * Handles character generation metadata based on provided parameters from planner
 * Actual content generation is handled by AgentEngine
 */
export class CharacterTool extends BaseSimpleTool {
  readonly toolType = ToolType.CHARACTER;
  readonly name = "CHARACTER";
  readonly description = "Process pre-generated character card data and calculate quality metrics";
  
  readonly parameters: ToolParameter[] = [
    {
      name: "character_data",
      type: "string",
      description: "Complete character card data generated by planner. Contains all character fields including name, description, personality, scenario, first_mes, mes_example, creator_notes, alternate_greetings, tags, and background object",
      required: true
    }
  ];

  protected async doWork(parameters: Record<string, any>, context: ExecutionContext): Promise<ExecutionResult> {
    const characterDataString = parameters.character_data;
    
    console.log(`ðŸ‘¤ Character tool processing with pre-generated data`);

    if (!characterDataString || typeof characterDataString !== 'string') {
      throw new Error("No character data string provided by planner");
    }

    let characterData: any;
    try {
      characterData = JSON.parse(characterDataString);
    } catch (error) {
      throw new Error("Failed to parse character_data JSON string");
    }

    return this.createSuccessResult({
      character_data: characterData,
    });
  }

}